{"version":3,"sources":["components/MainWeatherWindow.js","components/CityInput.js","components/WeatherBox.js","components/Loader.js","App.js","index.js"],"names":["MainWeatherWindow","weatherDesc","city","data","children","backgroundClass","weather_desc","includes","className","src","icon","alt","Math","round","temp","toLowerCase","humidity","wind","CityInput","makeApiCall","useState","cityName","setCityName","onSearchClick","a","test","inputElement","document","querySelector","classList","add","isSuccess","placeholder","remove","alert","onKeyPressHandler","e","key","type","value","onChange","target","onKeyPress","style","top","onClick","disabled","WeatherBox","date","Date","getDay","Loader","App","undefined","setCity","days","setDays","loading","setLoading","error","setError","updateState","name","updatedDays","getDayIndices","map","index","listItem","list","dt_txt","weather","description","main","speed","fetch","process","response","json","cod","dayIndices","currentDay","slice","i","push","day","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f4b65be4.chunk.js","sourcesContent":["import React from 'react';\nimport './MainWeatherWindow.css';\n\nconst getBackgroundClass = (weatherDesc) => {\n  if (weatherDesc.includes('rain')) return 'rainy-bg';\n  if (weatherDesc.includes('sun')) return 'sunny-bg';\n  if (weatherDesc.includes('cloud')) return 'cloudy-bg';\n  return 'default-bg';\n};\n\nconst MainWeatherWindow = ({ city, data,children }) => {\n  const backgroundClass = data ? getBackgroundClass(data.weather_desc) : 'default-bg';\n\n  return (\n    <div className={`main ${backgroundClass}`}>\n      <div className='inner-main'>\n        {!city && <h1 className='title'>Weather Forecast</h1>}\n        {city && data && (\n          <div className='weather-container'>\n            <div className='icon-container'>\n              <img\n                src={`http://openweathermap.org/img/wn/${data.icon === \"01n\" ? \"01d\" : data.icon}@2x.png`}\n                alt='weather icon'\n                className='weather-icon'\n              />\n              <h1 className='city-name'>{city}</h1>\n            </div>\n            <div className='today'>\n              <p className='temperature'>Temperature: {Math.round(data.temp)}°C</p>\n              <p className='description'>{data.weather_desc.toLowerCase()}</p>\n              <p className='humidity'>Humidity: {data.humidity}%</p>\n              <p className='wind'>Wind Speed: {data.wind} km/h</p>\n            </div>\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default MainWeatherWindow;","import React, { useState } from 'react';\nimport './CityInput.css';\n\nconst CityInput = ({ city, makeApiCall }) => {\n  const [cityName, setCityName] = useState('');\n\n  const onSearchClick = async () => {\n    if (/^[a-zA-Z\\s]+$/.test(cityName)) {\n      const inputElement = document.querySelector('.city-input');\n      inputElement.classList.add('loading');\n\n      const isSuccess = await makeApiCall(cityName);\n      inputElement.placeholder = isSuccess ? 'Enter a City...' : 'City not found, try again...';\n\n      inputElement.classList.remove('loading');\n      setCityName('');\n    } else {\n      alert('Please enter a valid city name.');\n    }\n  };\n\n  const onRefreshClick = () => {\n    if (city) makeApiCall(city); // Refresh the weather for the current city\n  };\n\n  const onKeyPressHandler = async (e) => {\n    if (e.key === 'Enter') {\n      onSearchClick();\n    }\n  };\n\n  return (\n    <div className='city-input-container'>\n      <input\n        className='city-input'\n        type='text'\n        value={cityName}\n        placeholder='Enter a City...'\n        onChange={(e) => setCityName(e.target.value)}\n        onKeyPress={onKeyPressHandler}\n        style={{\n          top: city ? '-380px' : '-20px',\n        }}\n      />\n      <div className='button-container'>\n        <button className='search-button' onClick={onSearchClick}>\n          🔍\n        </button>\n        <button className='refresh-button' onClick={onRefreshClick} disabled={!city}>\n          🔄\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CityInput;\n","import React from 'react';\nimport './WeatherBox.css';\n\nconst WeatherBox = ({ date, icon, temp, humidity, wind }) => {\n  const getDay = (dateString) => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[new Date(dateString).getDay()];\n  };\n\n  return (\n    <div className='weather-box'>\n      <h1>{date ? getDay(date) : ''}</h1>\n      <img\n          src={`http://openweathermap.org/img/wn/${icon === \"01n\" ? \"01d\" : icon}@2x.png`}\n          alt='weather icon'\n      />\n      <span className='temp'>{temp}°C</span>\n      <p>Humidity: {humidity}%</p>\n      <p>Wind: {wind} km/h</p>\n    </div>\n  );\n};\n\nexport default WeatherBox;\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className='loader'></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport MainWeatherWindow from './components/MainWeatherWindow';\nimport CityInput from './components/CityInput';\nimport WeatherBox from './components/WeatherBox';\nimport Loader from './components/Loader';\n\nconst App = () => {\n  const [city, setCity] = useState(undefined);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(''); // State for error message\n\n  const updateState = (data) => {\n    const cityName = data.city.name;\n    const dayIndices = getDayIndices(data);\n\n    // console.log(data.list[0].weather[0].icon);\n    // console.log(data.list[1].weather[1].icon);\n    \n    const updatedDays = dayIndices.map(index => {\n      const listItem = data.list[index];\n      return {\n        date: listItem.dt_txt,\n        weather_desc: listItem.weather[0].description,\n        icon: listItem.weather[0].icon,\n        temp: Math.round(listItem.main.temp),\n        humidity: listItem.main.humidity,\n        wind: Math.round(listItem.wind.speed * 3.6)\n      };\n    });\n\n    setCity(cityName);\n    setDays(updatedDays);\n    setLoading(false);\n    setError(''); // Clear error on successful fetch\n  };\n\n  const makeApiCall = async (cityName) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n      );\n      const data = await response.json();\n\n      if (data.cod === '200') {\n        updateState(data);\n        return true;\n      } else {\n        setError('City not found. Please try again.');\n        setLoading(false);\n        return false;\n      }\n    } catch (err) {\n      setError('Failed to fetch data. Please check your connection.');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const getDayIndices = (data) => {\n    let dayIndices = [0];\n    let index = 0;\n    let currentDay = data.list[index].dt_txt.slice(8, 10);\n\n    for (let i = 0; i < 4; i++) {\n      while (\n        currentDay === data.list[index].dt_txt.slice(8, 10) ||\n        data.list[index].dt_txt.slice(11, 13) !== '15'\n      ) {\n        index++;\n      }\n      dayIndices.push(index);\n      currentDay = data.list[index].dt_txt.slice(8, 10);\n    }\n    return dayIndices;\n  };\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {loading ? (\n          <Loader />\n        ) : (\n          <MainWeatherWindow data={days[0]} city={city} error={error} >\n            <CityInput city={city} makeApiCall={makeApiCall} />\n            {error && <p className='error-message'>{error}</p>} {/* Error Message */}\n            <ul className='weather-box-list'>\n              {days.slice(1).map((day, index) => (\n                <li key={index}>\n                  <WeatherBox {...day} />\n                </li>\n              ))}\n            </ul>\n          </MainWeatherWindow>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}